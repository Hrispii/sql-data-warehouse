---------------------------------- README -----------------------------------------------
-- Welcome to the Silver Layer Loader!                                                 --
-- This procedure transforms and standardizes all CRM and ERP tables from the          --
-- Bronze Layer into the Silver Layer, ensuring data consistency, quality, and         --
-- readiness for analytical consumption. It applies business rules, formatting,        --
-- deduplication, type casting, and logical corrections across all datasets.           --
--                                                                                     --
--                               Key Features:                                         --
--  Cleans and validates raw Bronze data (e.g., fixing dates, genders, categories)     --
--  Standardizes country names, marital statuses, and product lines                    --
--  Handles missing, invalid, or duplicate records                                     --
--  Tracks execution time per table and overall process                                --
--  Logs all operations in the console for transparent monitoring                      --
--                                                                                     --
--                              Layer Purpose:                                         --
-- The Silver Layer serves as the cleaned and conformed data zone, ready for loading   --
-- into the Gold Layer or for use in analytics, dashboards, and business intelligence. --
--                                                                                     --
--                            Execution Command:                                       --
-- To run the full transformation pipeline:                                            --
-- CALL silverlayer.load_silver();                                                     --
--                                                                                     --
--                            Technical Overview:                                      --
--  Language: PL/pgSQL (PostgreSQL Stored Procedure)                                   --
--  Handles both CRM and ERP data sources                                              --
--  Automatically measures and logs processing time per dataset                        --
--  Includes defensive logic (CASE, COALESCE, LEAD, data trimming, etc)                --
--                                                                                     --
--                               Data Cleaning                                         --
-- This procedure performs comprehensive data cleaning and transformation,             --
-- including duplicate removal, filtering, handling missing or invalid values,         --
-- trimming spaces, type casting, outlier correction, deriving new columns,            --
-- enrichment, and full data standardization â€” ensuring a clean, consistent,           --
-- and analytics-ready Silver Layer                                                    --
--                                                                                     --
--                                                                                     --
-- You can check the quality of the data using the file "quality_cheack_silver" in the --
-- tests folder                                                                        --
-----------------------------------------------------------------------------------------




CREATE OR REPLACE PROCEDURE silverlayer.load_silver()
LANGUAGE plpgsql
AS $procedure$
DECLARE
    start_time timestamp;
    end_time timestamp;
    crm_time numeric := 0;
    erp_time numeric := 0;
	full_time numeric := 0;
BEGIN
    RAISE NOTICE '%', repeat('=', 40);
    RAISE NOTICE '          LOADING SILVER LAYER          ';
    RAISE NOTICE '%', repeat('=', 40);

    -- ===============================================
    --                 CRM TABLES
    -- ===============================================

	--------------------------------------------------
	--               CRM_CUST_INFO                  --
    start_time := clock_timestamp();

    TRUNCATE silverlayer.crm_cust_info;

    INSERT INTO silverlayer.crm_cust_info (
        cst_id,
        cst_key,
        cst_firstname,
        cst_lastname,
        cst_marital_status,
        cst_gndr,
        cst_create_date
    )
    SELECT 
        cst_id,
        cst_key,
        TRIM(cst_firstname) AS cst_firstname,
        TRIM(cst_lastname) AS cst_lastname,
        CASE 
            WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
            WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
            ELSE 'n/a'
        END AS cst_marital_status,
        CASE 
            WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
            WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
            ELSE 'n/a'
        END AS cst_gndr,
        cst_create_date
    FROM (
        SELECT *, 
               ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
        FROM bronzelayer.crm_cust_info
        WHERE cst_id IS NOT NULL
    ) t
    WHERE flag_last = 1;

    end_time := clock_timestamp();
    RAISE NOTICE 'Loaded crm_cust_info in % seconds', extract(epoch from (end_time - start_time));
	crm_time  := crm_time + extract(epoch FROM (end_time - start_time));
    full_time := full_time + extract(epoch from (end_time - start_time));


	-------------------------------------------------
    --               CRM_PRD_INFO                  --
    start_time := clock_timestamp();

    TRUNCATE silverlayer.crm_prd_info;

    INSERT INTO silverlayer.crm_prd_info (
        prd_id,
        dwh_cat_id,
        dwh_prd_key,
        prd_nm,
        prd_cost,
        prd_line,
        prd_start_dt,
        prd_end_dt,
        dwh_create_date
    )
    SELECT 
        prd_id,
        REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS dwh_cat_id,
        SUBSTRING(prd_key, 7, LENGTH(prd_key)) AS dwh_prd_key,
        prd_nm,
        COALESCE(prd_cost, 0) AS prd_cost,
        CASE UPPER(TRIM(prd_line))
            WHEN 'R' THEN 'Road'
            WHEN 'M' THEN 'Mountain'
            WHEN 'S' THEN 'Other Sales'
            WHEN 'T' THEN 'Touring'
            ELSE 'n/a'
        END AS prd_line,
        CAST(prd_start_dt AS DATE),
        CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - INTERVAL '1 day' AS DATE) AS prd_end_dt,
        clock_timestamp() AS dwh_create_date
    FROM bronzelayer.crm_prd_info;

    end_time := clock_timestamp();
    RAISE NOTICE 'Loaded crm_prd_info in % seconds', extract(epoch FROM (end_time - start_time));
	crm_time  := crm_time + extract(epoch FROM (end_time - start_time));
    full_time := full_time + extract(epoch from (end_time - start_time));


	------------------------------------------------------
    --               CRM_SALES_DETAILS                  --
    start_time := clock_timestamp();

    TRUNCATE silverlayer.crm_sales_details;

    INSERT INTO silverlayer.crm_sales_details (
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        sls_order_dt,
        sls_ship_dt,
        sls_due_dt,
        sls_sales,
        sls_quantity,
        sls_price
    )
    SELECT 
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        CASE 
            WHEN LENGTH(sls_order_dt::varchar) != 8 OR sls_order_dt = 0 THEN NULL
            ELSE TO_DATE(sls_order_dt::varchar, 'YYYYMMDD')
        END AS sls_order_dt,
        CASE 
            WHEN LENGTH(sls_ship_dt::varchar) != 8 OR sls_ship_dt = 0 THEN NULL
            ELSE TO_DATE(sls_ship_dt::varchar, 'YYYYMMDD')
        END AS sls_ship_dt,
        CASE 
            WHEN LENGTH(sls_due_dt::varchar) != 8 OR sls_due_dt = 0 THEN NULL
            ELSE TO_DATE(sls_due_dt::varchar, 'YYYYMMDD')
        END AS sls_due_dt,
        CASE 
            WHEN sls_sales <= 0 OR sls_sales IS NULL OR sls_sales != sls_quantity * ABS(sls_price)
                THEN sls_quantity * ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
        sls_quantity,
        CASE 
            WHEN sls_price = 0 OR sls_price IS NULL THEN 
                (CASE WHEN sls_quantity = 0 THEN 0 ELSE sls_sales / sls_quantity END)
            WHEN sls_price < 0 THEN ABS(sls_price)
            ELSE sls_price
        END AS sls_price
    FROM bronzelayer.crm_sales_details;

    end_time := clock_timestamp();
    RAISE NOTICE 'Loaded crm_sales_details in % seconds', extract(epoch FROM (end_time - start_time));
	crm_time  := crm_time + extract(epoch FROM (end_time - start_time));
    full_time := full_time + extract(epoch from (end_time - start_time));


    RAISE NOTICE '%', repeat('-', 40);
    RAISE NOTICE 'CRM Loading Time: % seconds', crm_time;
    RAISE NOTICE '%', repeat('-', 40);


    -- ===============================================
    --                 ERP TABLES
    -- ===============================================
    RAISE NOTICE '%', repeat('-', 40);
    RAISE NOTICE '           Loading ERP Tables';
    RAISE NOTICE '%', repeat('-', 40);

	--------------------------------------------------
	--               ERP_CUST_AZ12                  --
    start_time := clock_timestamp();

    RAISE NOTICE '%', repeat('-', 30);
    RAISE NOTICE 'Loading: erp_cust_az12';
    RAISE NOTICE '%', repeat('-', 30);

    TRUNCATE silverlayer.erp_cust_az12;

    INSERT INTO silverlayer.erp_cust_az12 (
        cid,
        bdate,
        gen
    )
    SELECT 
        CASE 
            WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4)
            ELSE cid
        END AS cid,
        CASE 
            WHEN bdate > clock_timestamp() THEN NULL
            ELSE bdate
        END AS bdate,
        CASE 
            WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
            WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
            ELSE 'n/a'
        END AS gen
    FROM bronzelayer.erp_cust_az12;

    end_time := clock_timestamp();
    RAISE NOTICE 'Loaded erp_cust_az12 in % seconds', extract(epoch FROM (end_time - start_time));
    erp_time  := erp_time + extract(epoch FROM (end_time - start_time));
    full_time := full_time + extract(epoch from (end_time - start_time));


	-------------------------------------------------
	--               ERP_LOC_A101                  --

    start_time := clock_timestamp();

    TRUNCATE silverlayer.erp_loc_a101;

    INSERT INTO silverlayer.erp_loc_a101 (
        cid,
        cntry
    )
    SELECT 
        REPLACE(cid, '-', '') AS cid,
        CASE 
            WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
            WHEN TRIM(cntry) = 'DE' THEN 'Germany'
            WHEN TRIM(cntry) IS NULL OR TRIM(cntry) = '' THEN 'n/a'
            ELSE cntry
        END AS cntry
    FROM bronzelayer.erp_loc_a101;

    end_time := clock_timestamp();
    RAISE NOTICE 'Loaded erp_loc_a101 in % seconds', extract(epoch FROM (end_time - start_time));
    erp_time  := erp_time + extract(epoch FROM (end_time - start_time));
    full_time := full_time + extract(epoch from (end_time - start_time));


	----------------------------------------------------
    --               ERP_PX_CAT_G1V2                  --
    start_time := clock_timestamp();

    TRUNCATE silverlayer.erp_px_cat_g1v2;

    INSERT INTO silverlayer.erp_px_cat_g1v2 (
        id,
        cat,
        subcat,
        maintenance
    )
    SELECT 
        id,
        cat,
        subcat,
        maintenance
    FROM bronzelayer.erp_px_cat_g1v2;

    end_time := clock_timestamp();
    RAISE NOTICE 'Loaded erp_px_cat_g1v2 in % seconds', extract(epoch FROM (end_time - start_time));
    erp_time  := erp_time + extract(epoch FROM (end_time - start_time));
    full_time := full_time + extract(epoch from (end_time - start_time));


    -- ===============================================
    --             FINAL SUCCESS MESSAGE
    -- ===============================================
    RAISE NOTICE '%', repeat('=', 40);
    RAISE NOTICE '           Successful!          ';
    RAISE NOTICE '       Duration: % seconds', full_time;
    RAISE NOTICE '%', repeat('=', 40);
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error Message: %', SQLERRM;
END;
$procedure$;
